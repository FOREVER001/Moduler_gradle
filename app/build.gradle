apply plugin: 'com.android.application'

println("hello gradle")
println "hello world"
rootProject.ext.username=163
println "${rootProject.ext.username}"
//赋值与引用
def androidId=rootProject.ext.androidId
def appId=rootProject.ext.appId
def support=rootProject.ext.dependencies
def url=rootProject.ext.url
def isRelease=rootProject.ext.isRelease
android {
    compileSdkVersion androidId.compileSdkVersion
    buildToolsVersion androidId.buildToolsVersion
    defaultConfig {
        applicationId appId.app
        minSdkVersion androidId.minSdkVersion
        targetSdkVersion androidId.targetSdkVersion
        versionCode androidId.versionCode
        versionName androidId.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        //开启分包
        multiDexEnabled true
        //设置分别配置
//        multiDexKeepFile file('multidex-config.txt')
        //将svg图片生成 指定维度的png
//        vectorDrawables.generatedDensities('xhdpi','xxhdpi')
        //使用support-v7兼容（5.0版本以上）
        vectorDrawables.useSupportLibrary = true
        //只保留指定和默认资源
        resConfigs ('zh-rCN')
        //配置so库cpu架构（真机arm,模拟器：x86）
        ndk {
            abiFilters ('armeabi','armeabi-v7a')

        }
        //源集-设置源集的属性，更改源集的java目录或者自由目录等
        sourceSets {
            main{
                if(!isRelease){
                    //如果是组件化模式，需要单独运行时
                    manifest.srcFile 'src/main/AndroidManifest.xml'
                    java.srcDirs = ['src/main/java']
                    res.srcDirs = ['src/main/res']
                    resources.srcDirs = ['src/main/resources']
                    aidl.srcDirs = ['src/main/aidl']
                    assets.srcDirs = ['src/main/assets']
                }else {
                    //集成化模式，整个项目打包
                    manifest.srcFile 'src/main/AndroidManifest.xml'
                }
            }
        }
    }
    //签名配置（隐形坑：必须写在buildTypes之前）
    signingConfigs {
        debug {
            //天坑，填错了，编译不通过还找不到问题
            storeFile file('C:/Users/zxh17/.android/debug.keystore')
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
        release {
            storeFile file('D:/workspace/moduler.jks')
            storePassword "123456"
            keyAlias "moduler"
            keyPassword "123456"
            //是否开启V2打包
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
            //对构建类设置签名信息
            signingConfig signingConfigs.debug
            buildConfigField("String","debug","\"${url.debug}\"")
        }
        release {
            signingConfig signingConfigs.release
            buildConfigField("String","release","\"${url.release}\"")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    //AdbOptions 可以对adb操作选项添加配置
    adbOptions {
        //配置操作超时时间，单位毫秒
        timeOutInMs = 5 * 1000_0
        //adb install 命令的选项配置
        installOptions '-r','-s'
    }
    //对dx操作的配置，接受一个DexOptions 类型的闭包，配置由DexOptions提供
    dexOptions {
        //配置执行dx 命令是为其分配的最大堆内存
        javaMaxHeapSize "4g"
        //配置是否预执行dex Libraries 工程，开启后会提高增量构建速度，不过会影响clean 构建的速度，默认true
        preDexLibraries = false
        //配置是否开启jumbo模式，代码方法是超过65535 需要强制开启才能构建成功
        jumboMode true
        //配置Gradle 运行dx命令时使用的线程数量
        threadCount 8
        //配置multidex参数
        additionalParameters = [
                '--multi-dex',//dex分包
                '--set-max-idx-number=50000',//每个包内方法数上限
                //'--main-dex-list='+'/multidex-config.txt'//打包到主classes.dex的文件列表
                '--minimal-main-dex'
        ]
    }
    //执行gradle lint命令即可执行lint命令，默认生成的报告在outputs/lint-result.html中
    lintOptions {
        //遇到lint 检查错误会终止构建，一般设置为false
        abortOnError false
        //将警告当中错误来处理（老版本：warningsAsErrors）
        warningsAsErrors false
        //检查新API
        check 'NewApi'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //标准写法
//    implementation group :'com.android.support',name:'appcompat-v7',version:'28.0.0'
    //简写
//    implementation 'com.android.support:appcompat-v7:28.0.0'
//    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

//    implementation support.appcompat
//    implementation support.constraint
    //最简洁的方式
    support.each{k,v ->implementation v}
}
